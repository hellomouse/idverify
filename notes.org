#+TITLE: Simple human-friendly identity verification (idverify)
#+STARTUP: entitiespretty

* Main idea
a quick moderate-strength authentication for use by Humans

* Main goals
  - deniability
    - nobody should be able to prove whether or not an authentication event succeeded
    - even if private keys are obtained for one or both parties
  - human-friendliness
    - the authentication process itself should involve minimal hassle
    - two people should be able to verify each other in a minimal amount of time
  - security
    - an attacker should need approaching impossible amounts of effort to defeat
      the scheme

* Main concept
  - A/B: shared secret S by doing ECDH then transforming the result
    A->B: AB1 = KDF(Salt1, S)
    B: verify AB1 == KDF(Salt1, S)
    B -> A: AB2 = KDF(Salt2, S)
    A: verify AB2 == KDF(Salt2, S)
  - deniability?
    - third party cannot verify authentication results without knowing S
    - with private keys it becomes possible to figure out whether the exchange
      succeeded however the entire process is able to be fabricated by one side
      - for well-known Salt1 and Salt2, AB1 and AB2 can be trivially generated
        without any knowledge or participation of the other side

* Resources
  - EFF large diceware wordlist has 7776 words
    <https://www.eff.org/files/2016/07/18/eff_large_wordlist.txt> from <https://www.eff.org/dice>
    - reduce this to 4096 words
      - 4096 / 7776 = 128 / 243
      - 7776 / 243 = 32
      - split word list into 32 groups, choose first 128 words of each group

* Definitions
  - KDF(Salt, Value): key derivation function
  - ECDHSecret: permanent shared pre-secret derived from ECDH
  - RandU16(): random unsigned 16-bit value
  - Apriv, Bpub, Apub, Bpriv: private key of A and public key of B, and vice versa
  - SeedA, SeedB: 5-digit base10 seed generated on A and B, respectively
  - UnixTime: current unix time in seconds
    - 64 bits, 8 bytes
  - SeedShared: shared seed computed from SeedA and SeedB
  - TimeWindowA, TimeWindowB: 8-minute time window as selected by A and B, respectively
  - TimeSelectA, TimeSelectB: 5-bit value to select specific time interval, see
    design choices section
  - TimeA, TimeB: time value accurate to 15 seconds, used to compute shared secret
  - S(T): shared secret from ECDHSecret, SeedShared, and given time value T
  - VerifyAB, VerifyBA: A -> B and B -> A verifiers sent over the wire, respectively
  - WordEncode(V): truncate V as necessary, then encode to 5 words using wordlist
  - TimeOffset: max acceptable window offset, probably 1

* Procedure
  - the procedure is symmetric for both sides, assuming A is self below
  - todo: replace 480 with a variable
  - compute ECDHSecret = ECDH(Apriv, Bpub)
  - compute local time window TimeWindowA = UnixTime - (UnixTime % 480)
  - compute local time selector TimeSelectA = floor((UnixTime % 480) / 15)
  - compute local time TimeA = UnixTime - (UnixTime % 15)
    - equivalent to TimeA = TimeWindowA + TimeSelectA * 15
  - compute local seed SeedA = ((RandU16() << 5) | TimeSelectA) % 1e5
  - send SeedA, receive SeedB
  - compute shared seed SeedShared = ((SeedA >> 4) | 1) * ((SeedB >> 4) | 1)
    - this is a 4-byte value
  - compute remote time select value TimeSelectB = SeedB & 0b11111
  - function for computing shared secret S(T) = Hash(ECDHSecret || SeedShared || T)
    - is Hash() needed here? could directly feed concatenated result to KDF
  - note: locally computed shared secret is S(TimeA)
  - compute check value VerifyAB = KDF(Bpub, S(TimeA))
  - send VerifyAB, receive VerifyBA
  - verify VerifyBA == KDF(Apub, S(T))
    - for offset in -TimeOffset to +TimeOffset (in case of 1, use -1, 0, +1)
      - try verify with time T = TimeWindowA + (offset * 480) + (TimeSelectB * 15)

* Design Choices TODO
  - SharedSeed computation
    - guarantees at minimum 11 bits of entropy per side, and one side cannot
      reduce entropy for the exchange below 11 bits
      - XOR could result in zeroing of one side's entropy by another
    - results in same value at both sides
    - shift seed left 5 bits to remove time selector value, then back one bit to
      ensure LSB is 1
  - Why is a seed needed?
    - multiple exchanges may happen in the same time window, which could
      potentially result in collisions
    - this may happen if, for example, a shared key was used by an organization
  - time selector value
    - a 480 second (8 minute) window split into 32 intervals of 15 seconds each
      - why? lcm(32, 60) = 480 seconds
    - allows pinpointing a 15-second interval if the 8 minute window is known
    - verification will try +/- one window to allow for at least 8 minutes
      response time
    - sent as part of seed, then recovered by the other side to resolve original timestamp

* Procedure (old)
  - A, B compute PS = ECDH(Apriv, Bpub) or vice versa
  - A, B generate AT, BT = floor(UT % 320 / 10)
  - A, B generate As, Bs = ((RandU16() << 5) | T) % 1e5
  - exchange As and Bs
  - A, B generate SS = ((As << 1) | 1) * ((Bs << 1) | 1)
    - guarantees at minimum 11 bits of entropy per side, one side cannot reduce
      entropy below 11 bits
    - generated the same for both sides
  - perform on both sides (swap A and B as necessary)
    - A computes shared secret S(TA) = Hash(PS || SS || TA)
      - if asynchronous mode is desired, ditch time value
        - TODO: possibly replace with something else?
    - A computes check value ABv = KDF(Bpub, S(TA))
    - A -> B: WordEncode(ABv)
    - B verifies ABv by trying KDF(Bpub, S(T)) for T = (TB - Td) .. (TB + Td)
    - on failure, report

* Ideas (old)
  - send keys
    - ephemeral key calculated as XOR(Hash(B || A), Hash(A || B)), where A and B
      are bit sequences sent in initial message
  - deniability
    - Actually I have an idea: use 64b of the shared secret and 64 from the
      challenge to generate a shared key. The response is the first 64b of a
      well-known message (0..0) encrypted with the shared secret. It is trivial
      to find much more keys that lead to exactly the same exchange. (iovoid)
